김덕성 재밌게 이해하고 계시네요. 평소 눈팅만하다가 처음으로 댓글달아봅니다.

http 요청은 크게 시작라인, 메세지 헤더, 메세지 바디 세가지 부분으로 나누어져 있습니다.
시작라인엔 요청방법(get, post … ), URL, HTTP 버전 이 들어가있고
메세지 헤더엔 말그대로 헤더정보가 들어가고요 (쿠키나 호스트이름, 길이 등등)
그 아래의 모든 부분을 body라고 합니다. 이렇게 생겼습니다.

시작라인
메세지 헤더
(엔터한번)
메세지 바디

http 응답은 첫라인이 다르고 비슷하게 생겼습니다 .

응답상태라인
메세지 헤더
(엔터한번)
메세지 바디

이런 텍스트를 서로 주고받고 브라우저와 서버가 각자 알아서 파싱해서 우리에게 이쁘게 보이게됩니다. 
1.
어떤 www.domain.com 에 get요청을 보내면 응답으로 아마 이런메세지를 받게될것입니다.

HTTP/1.1 200 OK
블라블라 메세지 헤더

<!DOCTYPE html>
<html>
…
</html>

이경우 응답(response)의 body가 html 문서가 맞습니다. 여기서 body가 html문서라고 생각하신것 같습니다.

그런데, 요청(request)에는 html문서가 들어가지 않습니다. html이 무엇인지 궁금해서 GET요청을 보내는 것이니까요. 그러므로 이경우 req.body 엔 아무것도 들어가있지 않습니다. 굳이 말하자면 res.body가 html문서가 되겠죠
그러면 GET 요청을 할 때 어떤 정보를 함께 보내고 싶을땐 어떻게 할까요? 이경우 query를 함께 보냅니다.
www.domain.com/human?name=홍길동&age=20
여기서 ? 부분부터를 query string이라고 합니다. req.query를 읽어보면 
req.query.name === 홍길동
req.query.age === 20 
이 들어가있는것을 보실 수있습니다.

post요청의 경우는 조금 다릅니다. form을 포스트로 보내는 경우를 생각해봅시다.
email : id@gmail.com 
password : 1234 
를 입력하여 전송했을때 post요청은 다음과 같이 보내집니다.

POST www.domain.com/login HTTP/1.1
블라블라 헤더

email=id@gmail.com&password=1234

방금전 get의 query와 비슷한 모양이 post의 body에 있는것에 주목해주세요. 이런 형식을 x-www-form-urlencoded라고 합니다. 

요즘은 json형식을 많이쓰죠 json을 보낼경우 다음과 같이 보냅니다.

POST www.domain.com/login HTTP/1.1
블라블라 헤더

{
“email”: “id@gmail.com”
“password”: 1234
}

그러므로 우리가 보낸 요청에 body가 어떤 형식을 갖고있는지 보고 그에 맞게 해석해줘야합니다. 이 역할을 body-parser가 해줍니다. express는 기본적으로 body를 해석해주지 않아서 다음과 같은 구문이 필요합니다. 

var bodyParser = require(‘body-parser’);

…

// parse application/x-www-form-urlencoded
app.use(bodyParser.urlencoded({ extended: false }))

// parse application/json
app.use(bodyParser.json())

매우 종종 보이실겁니다. 

2. 
이렇게 서버에 요청을 보내는 두가지 방법을 해석한 req.query와 req.body를 보셨는데요 말씀하신것처럼 req.params도 있습니다 이는 url과 관련이 있습니다.

app.get(‘/human/:name’, function (req, res) {

})

이런 라우터를 생성했을때 

www.domain.com/human/kim 으로 요청을 보내면 자동으로 
req.params.name === ‘kim’이 됩니다. 이는 mongodb와는 전혀 관련이 없습니다 ㅎㅎ
말씀하신것은 예를들어 
app.get(‘human/:id’, function (req, res) {
Human.findOnd({
id: req.params.id
}, function (err, human) {
res.send(human);
})
})
처럼 작성했다면 DB에서 id에 해당하는 데이터를 가져올 수 있게 만들 수 있겠네요. params는 expressjs가 구현한 것으로 express api 에 있습니다. 참고로 말씀드리면 이는 ‘/‘구분과는 전혀 상관이 없습니다. /를 빼고 

app.get(‘/human:name’, function (req, res){})
같이 작성했다면, 
/humankim 으로 요청하면 req.params.name === kim,
/humanLee 로 요청하면 req.params.name === Lee 
가 됩니다.

이렇게 req에서 쓸수있는것은 req.body, req.query, req.params가 있습니다.

이를 expressjs 4.0에선 param이란 것으로 묶어 주었습니다. (req.param과 req.params는 다릅니다.)
body에 name이라는 것이 있어도 req.param(‘name’)으로 접근할 수있었고
query에, params에 name이 있어도 req.param(‘name’)으로 접근할 수있었습니다. 그런데 이는 오히려 body에 있는지 query에 있는지 알수 없고 두군데 다있으면 어떻게 처리하는지 등등 불편한 점이 많아서 express 5.0버전에선 사라질 예정입니다.

from: https://www.facebook.com/groups/nodejskr/permalink/761256463974646/?comment_id=761315890635370&comment_tracking=%7B%22tn%22%3A%22R%22%7D zeakd